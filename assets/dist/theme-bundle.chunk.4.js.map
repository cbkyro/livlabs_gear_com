{"version":3,"sources":["webpack:///./assets/js/theme/common/form-utils.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/state-country.js"],"names":["inputTagNames","classifyInput","input","formFieldClass","$input","$","$formField","parent","tagName","prop","toLowerCase","className","specificClassName","inputType","addClass","classifyForm","formSelector","options","$form","$inputs","find","join","each","__","getFieldId","$field","fieldId","match","length","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","value","after","Validators","setEmailValidation","validator","field","add","selector","validate","cb","val","result","forms","email","errorMessage","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","nod","classes","forEach","hasClass","removeClass","re","test","password","notEmpty","makeStateRequired","stateElement","context","attrs","item","ret","replacementAttributes","id","class","replaceWith","$newElement","$hiddenInput","remove","prev","append","required","show","makeStateOptional","hide","addOptions","statesArray","$selectElement","container","push","prefix","states","stateObj","useIdForStates","html","callback","on","countryName","event","currentTarget","utils","api","country","getByName","err","response","swal","text","state_error","$currentInput","newElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;;AAEA,IAAMA,gBAAgB,CAClB,OADkB,EAElB,QAFkB,EAGlB,UAHkB,CAAtB;;AAMA;;;;;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,cAA9B,EAA8C;AAC1C,QAAMC,SAAS,6CAACC,CAACH,KAAF,CAAf;AACA,QAAMI,aAAaF,OAAOG,MAAP,OAAkBJ,cAAlB,CAAnB;AACA,QAAMK,UAAUJ,OAAOK,IAAP,CAAY,SAAZ,EAAuBC,WAAvB,EAAhB;;AAEA,QAAIC,YAAeR,cAAf,UAAkCK,OAAtC;AACA,QAAII,0BAAJ;;AAEA;AACA,QAAIJ,YAAY,OAAhB,EAAyB;AACrB,YAAMK,YAAYT,OAAOK,IAAP,CAAY,MAAZ,CAAlB;;AAEA,YAAI,uDAAW,CAAC,OAAD,EAAU,UAAV,EAAsB,QAAtB,CAAX,EAA4CI,SAA5C,CAAJ,EAA4D;AACxD;AACAF,wBAAeR,cAAf,UAAkC,wDAAYU,SAAZ,CAAlC;AACH,SAHD,MAGO;AACH;AACAD,qCAAuBD,SAAvB,GAAmC,yDAAaE,SAAb,CAAnC;AACH;AACJ;;AAED;AACA,WAAOP,WACFQ,QADE,CACOH,SADP,EAEFG,QAFE,CAEOF,iBAFP,CAAP;AAGH;;AAED;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAASG,YAAT,CAAsBC,YAAtB,EAAkD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACrD,QAAMC,QAAQ,6CAACb,CAACW,YAAF,CAAd;AACA,QAAMG,UAAUD,MAAME,IAAN,CAAWpB,cAAcqB,IAAd,CAAmB,IAAnB,CAAX,CAAhB;;AAEA;AAJqD,gCAKXJ,OALW,CAK7Cd,cAL6C;AAAA,QAK7CA,cAL6C,yCAK5B,YAL4B;;AAOrD;;AACAgB,YAAQG,IAAR,CAAa,UAACC,EAAD,EAAKrB,KAAL,EAAe;AACxBD,sBAAcC,KAAd,EAAqBC,cAArB;AACH,KAFD;;AAIA,WAAOe,KAAP;AACH;;AAED;;;;;AAKA,SAASM,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAMC,UAAUD,OAAOhB,IAAP,CAAY,MAAZ,EAAoBkB,KAApB,CAA0B,UAA1B,CAAhB;;AAEA,QAAID,WAAWA,QAAQE,MAAR,KAAmB,CAAlC,EAAqC;AACjC,eAAOF,QAAQ,CAAR,CAAP;AACH;;AAED,WAAO,EAAP;AACH;;AAED;;;;AAIA,SAASG,sBAAT,CAAgCC,WAAhC,EAA6C;AACzC,QAAMJ,UAAUF,WAAWM,WAAX,CAAhB;AACA,QAAMC,kBAAkB;AACpBC,cAAM,QADc;AAEpBC,kCAAwBP,OAFJ;AAGpBQ,eAAO;AAHa,KAAxB;;AAMAJ,gBAAYK,KAAZ,CAAkB,6CAAC9B,CAAC,WAAF,EAAe0B,eAAf,CAAlB;AACH;;AAED,IAAMK,aAAa;AACf;;;;;AAKAC,wBAAoB,4BAACC,SAAD,EAAYC,KAAZ,EAAsB;AACtC,YAAIA,KAAJ,EAAW;AACPD,sBAAUE,GAAV,CAAc;AACVC,0BAAUF,KADA;AAEVG,0BAAU,kBAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,wBAAMC,SAAS,qDAAKC,CAACC,KAAN,CAAYH,GAAZ,CAAf;;AAEAD,uBAAGE,MAAH;AACH,iBANS;AAOVG,8BAAc;AAPJ,aAAd;AASH;AACJ,KAlBc;;AAoBf;;;;;;;;AAQAC,2BAAuB,+BAACX,SAAD,EAAYY,gBAAZ,EAA8BC,iBAA9B,EAAiDC,YAAjD,EAA+DC,UAA/D,EAA8E;AACjG,YAAMC,YAAY,6CAACjD,CAAC6C,gBAAF,CAAlB;AACA,YAAMK,sBAAsB,CACxB;AACId,sBAAUS,gBADd;AAEIR,sBAAU,kBAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,oBAAMC,SAASD,IAAIhB,MAAnB;;AAEA,oBAAIyB,UAAJ,EAAgB;AACZ,2BAAOV,GAAG,IAAH,CAAP;AACH;;AAEDA,mBAAGE,MAAH;AACH,aAVL;AAWIG,0BAAc;AAXlB,SADwB,EAcxB;AACIP,sBAAUS,gBADd;AAEIR,sBAAU,kBAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,oBAAMC,SAASD,IAAIjB,KAAJ,CAAU,IAAI6B,MAAJ,CAAWJ,aAAaK,KAAxB,CAAV,KACRb,IAAIjB,KAAJ,CAAU,IAAI6B,MAAJ,CAAWJ,aAAaM,OAAxB,CAAV,CADQ,IAERd,IAAIhB,MAAJ,IAAcwB,aAAaO,SAFlC;;AAIA;AACA,oBAAIN,cAAcT,IAAIhB,MAAJ,KAAe,CAAjC,EAAoC;AAChC,2BAAOe,GAAG,IAAH,CAAP;AACH;;AAEDA,mBAAGE,MAAH;AACH,aAbL;AAcIG,0BAAcI,aAAaQ;AAd/B,SAdwB,EA8BxB;AACInB,sBAAUU,iBADd;AAEIT,sBAAU,kBAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,oBAAMC,SAASD,IAAIhB,MAAnB;;AAEA,oBAAIyB,UAAJ,EAAgB;AACZ,2BAAOV,GAAG,IAAH,CAAP;AACH;;AAEDA,mBAAGE,MAAH;AACH,aAVL;AAWIG,0BAAc;AAXlB,SA9BwB,EA2CxB;AACIP,sBAAUU,iBADd;AAEIT,sBAAU,kBAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,oBAAMC,SAASD,QAAQU,UAAUV,GAAV,EAAvB;;AAEAD,mBAAGE,MAAH;AACH,aANL;AAOIG,0BAAc;AAPlB,SA3CwB,CAA5B;;AAsDAV,kBAAUE,GAAV,CAAce,mBAAd;AACH,KArFc;;AAuFf;;;;;;;;;;AAUAM,8BAA0B,kCAACvB,SAAD,EAAYwB,SAAZ,EAA0B;AAAA,YAE5CC,aAF4C,GAO5CD,SAP4C,CAE5CC,aAF4C;AAAA,YAG5CC,gBAH4C,GAO5CF,SAP4C,CAG5CE,gBAH4C;AAAA,YAI5ChD,YAJ4C,GAO5C8C,SAP4C,CAI5C9C,YAJ4C;AAAA,YAK5CiD,gBAL4C,GAO5CH,SAP4C,CAK5CG,gBAL4C;AAAA,YAM5CC,gBAN4C,GAO5CJ,SAP4C,CAM5CI,gBAN4C;;;AAShD5B,kBAAU6B,SAAV,CAAoB;AAChBC,kBAAMpD,YADU;AAEhBqD,2BAAe,IAFC;AAGhBC,0BAAc,GAHE,CAGG;AAHH,SAApB;;AAMAhC,kBAAUE,GAAV,CAAc;AACVQ,0BAAc,yCADJ;AAEVP,sBAAUyB,gBAFA;AAGVxB,mCAAqBwB,gBAArB,SAAyCD;AAH/B,SAAd;;AAMA3B,kBAAUE,GAAV,CAAc;AACVQ,0BAAc,yCADJ;AAEVP,sBAAUwB,gBAFA;AAGVvB,mCAAqBwB,gBAArB,SAAyCD;AAH/B,SAAd;;AAMA3B,kBAAUE,GAAV,CAAc;AACVQ,0BAAc,yBADJ;AAEVP,sBAAUwB,gBAFA;AAGVvB,sBAAU;AAHA,SAAd;;AAMAJ,kBAAUE,GAAV,CAAc;AACVQ,0BAAc,yBADJ;AAEVP,sBAAUyB,gBAFA;AAGVxB,sBAAU;AAHA,SAAd;;AAMAJ,kBAAUE,GAAV,CAAc;AACVQ,0BAAc,+BADJ;AAEVP,sBAAU,CAACyB,gBAAD,EAAmBD,gBAAnB,CAFA;AAGVvB,sBAAU;AAHA,SAAd;;AAMAJ,kBAAUiC,iBAAV,CAA4B;AACxB9B,sBAAU,CAACyB,gBAAD,EAAmBD,gBAAnB,CADc;AAExB1D,oBAAQyD,gBAFgB;AAGxBQ,uBAAWT;AAHa,SAA5B;AAKH,KAnJc;;AAqJf;;;;;AAKAU,+BAA2B,mCAACnC,SAAD,EAAYC,KAAZ,EAAsB;AAC7C,YAAIA,KAAJ,EAAW;AACPD,sBAAUE,GAAV,CAAc;AACVC,0BAAUF,KADA;AAEVG,0BAAU,UAFA;AAGVM,8BAAc;AAHJ,aAAd;AAKH;AACJ,KAlKc;;AAoKf;;;;AAIA0B,4BAAwB,gCAACnC,KAAD,EAAW;AAC/B,YAAMoC,qBAAqB,6CAACtE,kBAAiBkC,MAAMqC,IAAN,CAAW,WAAX,CAAlB,QAA3B;;AAEAC,eAAOC,IAAP,CAAY,4CAAGC,CAACC,OAAhB,EAAyBC,OAAzB,CAAiC,UAAC/C,KAAD,EAAW;AACxC,gBAAIyC,mBAAmBO,QAAnB,CAA4B,4CAAGH,CAACC,OAAJ,CAAY9C,KAAZ,CAA5B,CAAJ,EAAqD;AACjDyC,mCAAmBQ,WAAnB,CAA+B,4CAAGJ,CAACC,OAAJ,CAAY9C,KAAZ,CAA/B;AACH;AACJ,SAJD;AAKH;AAhLc,CAAnB;;;;;;;;;;;;;;AChHA;AAAA,IAAMY,QAAQ;AACVC,SADU,iBACJb,KADI,EACG;AACT,YAAMkD,KAAK,YAAX;AACA,eAAOA,GAAGC,IAAH,CAAQnD,KAAR,CAAP;AACH,KAJS;;;AAMV;;;;;AAKAoD,YAXU,oBAWDpD,KAXC,EAWM;AACZ,eAAO,KAAKqD,QAAL,CAAcrD,KAAd,CAAP;AACH,KAbS;;;AAeV;;;;;;AAMAqD,YArBU,oBAqBDrD,KArBC,EAqBM;AACZ,eAAOA,MAAMN,MAAN,GAAe,CAAtB;AACH;AAvBS,CAAd;;AA0Be,+DAAAkB,KAAf,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;;AAEA;AACA;;AAEA;;;;AAIA,SAAS0C,iBAAT,CAA2BC,YAA3B,EAAyCC,OAAzC,EAAkD;AAC9C,QAAMC,QAAQ,wDAAYF,aAAahF,IAAb,CAAkB,YAAlB,CAAZ,EAA6C,UAACoC,MAAD,EAAS+C,IAAT,EAAkB;AACzE,YAAMC,MAAMhD,MAAZ;AACAgD,YAAID,KAAK3D,IAAT,IAAiB2D,KAAK1D,KAAtB;AACA,eAAO2D,GAAP;AACH,KAJa,CAAd;;AAMA,QAAMC,wBAAwB;AAC1BC,YAAIJ,MAAMI,EADgB;AAE1B,sBAAcJ,MAAM,YAAN,CAFY;AAG1BK,eAAO,aAHmB;AAI1B/D,cAAM0D,MAAM1D,IAJc;AAK1B,2BAAmB0D,MAAM,iBAAN;AALO,KAA9B;;AAQAF,iBAAaQ,WAAb,CAAyB,6CAAC5F,CAAC,mBAAF,EAAuByF,qBAAvB,CAAzB;;AAEA,QAAMI,cAAc,6CAAC7F,CAAC,2BAAF,CAApB;AACA,QAAM8F,eAAe,6CAAC9F,CAAC,2BAAF,CAArB;;AAEA,QAAI8F,aAAavE,MAAb,KAAwB,CAA5B,EAA+B;AAC3BuE,qBAAaC,MAAb;AACH;;AAED,QAAIF,YAAYG,IAAZ,GAAmBjF,IAAnB,CAAwB,OAAxB,EAAiCQ,MAAjC,KAA4C,CAAhD,EAAmD;AAC/C;AACAsE,oBAAYG,IAAZ,GAAmBC,MAAnB,aAAoCZ,QAAQa,QAA5C;AACH,KAHD,MAGO;AACHL,oBAAYG,IAAZ,GAAmBjF,IAAnB,CAAwB,OAAxB,EAAiCoF,IAAjC;AACH;;AAED,WAAON,WAAP;AACH;;AAED;;;;AAIA,SAASO,iBAAT,CAA2BhB,YAA3B,EAAyC;AACrC,QAAME,QAAQ,wDAAYF,aAAahF,IAAb,CAAkB,YAAlB,CAAZ,EAA6C,UAACoC,MAAD,EAAS+C,IAAT,EAAkB;AACzE,YAAMC,MAAMhD,MAAZ;AACAgD,YAAID,KAAK3D,IAAT,IAAiB2D,KAAK1D,KAAtB;;AAEA,eAAO2D,GAAP;AACH,KALa,CAAd;;AAOA,QAAMC,wBAAwB;AAC1B9D,cAAM,MADoB;AAE1B+D,YAAIJ,MAAMI,EAFgB;AAG1B,sBAAcJ,MAAM,YAAN,CAHY;AAI1BK,eAAO,YAJmB;AAK1B/D,cAAM0D,MAAM1D,IALc;AAM1B,2BAAmB0D,MAAM,iBAAN;AANO,KAA9B;;AASAF,iBAAaQ,WAAb,CAAyB,6CAAC5F,CAAC,WAAF,EAAeyF,qBAAf,CAAzB;;AAEA,QAAMI,cAAc,6CAAC7F,CAAC,2BAAF,CAApB;;AAEA,QAAI6F,YAAYtE,MAAZ,KAAuB,CAA3B,EAA8B;AAC1BC,QAAA,0EAAsBA,CAACqE,WAAvB;AACAA,oBAAYG,IAAZ,GAAmBjF,IAAnB,CAAwB,OAAxB,EAAiCsF,IAAjC;AACH;;AAED,WAAOR,WAAP;AACH;;AAED;;;;;;AAMA,SAASS,UAAT,CAAoBC,WAApB,EAAiCC,cAAjC,EAAiD5F,OAAjD,EAA0D;AACtD,QAAM6F,YAAY,EAAlB;;AAEAA,cAAUC,IAAV,uBAAmCH,YAAYI,MAA/C;;AAEA,QAAI,CAAC,sDAAUH,cAAV,CAAL,EAAgC;AAC5B,2DAAOD,YAAYK,MAAnB,EAA2B,UAACC,QAAD,EAAc;AACrC,gBAAIjG,QAAQkG,cAAZ,EAA4B;AACxBL,0BAAUC,IAAV,qBAAiCG,SAASnB,EAA1C,UAAiDmB,SAASjF,IAA1D;AACH,aAFD,MAEO;AACH6E,0BAAUC,IAAV,qBAAiCG,SAASjF,IAA1C,UAAmDiF,SAASjF,IAA5D;AACH;AACJ,SAND;;AAQA4E,uBAAeO,IAAf,CAAoBN,UAAUzF,IAAV,CAAe,GAAf,CAApB;AACH;AACJ;;AAED;;;;;;;AAOA,+DAAe,UAAUoE,YAAV,EAAyD;AAAA,QAAjCC,OAAiC,uEAAvB,EAAuB;AAAA,QAAnBzE,OAAmB;AAAA,QAAVoG,QAAU;;AACpE;;;;;;;AAOA,QAAI,OAAOpG,OAAP,KAAmB,UAAvB,EAAmC;AAC/B;AACAoG,mBAAWpG,OAAX;AACAA,kBAAU,EAAV;AACA;AACH;;AAEDZ,IAAA,6CAACA,CAAC,mCAAF,EAAuCiH,EAAvC,CAA0C,QAA1C,EAAoD,iBAAS;AACzD,YAAMC,cAAc,6CAAClH,CAACmH,MAAMC,aAAR,EAAuB7E,GAAvB,EAApB;;AAEA,YAAI2E,gBAAgB,EAApB,EAAwB;AACpB;AACH;;AAEDG,QAAA,kEAAKA,CAACC,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BN,WAA5B,EAAyC,UAACO,GAAD,EAAMC,QAAN,EAAmB;AACxD,gBAAID,GAAJ,EAAS;AACLE,gBAAA,kDAAIA,CAAC;AACDC,0BAAMvC,QAAQwC,WADb;AAEDlG,0BAAM;AAFL,iBAAL;;AAKA,uBAAOqF,SAASS,GAAT,CAAP;AACH;;AAED,gBAAMK,gBAAgB,6CAAC9H,CAAC,2BAAF,CAAtB;;AAEA,gBAAI,CAAC,sDAAU0H,SAASnD,IAAT,CAAcqC,MAAxB,CAAL,EAAsC;AAClC;AACA,oBAAMJ,iBAAiBrB,kBAAkB2C,aAAlB,EAAiCzC,OAAjC,CAAvB;;AAEAiB,2BAAWoB,SAASnD,IAApB,EAA0BiC,cAA1B,EAA0C5F,OAA1C;AACAoG,yBAAS,IAAT,EAAeR,cAAf;AACH,aAND,MAMO;AACH,oBAAMuB,aAAa3B,kBAAkB0B,aAAlB,EAAiCzC,OAAjC,CAAnB;;AAEA2B,yBAAS,IAAT,EAAee,UAAf;AACH;AACJ,SAvBD;AAwBH,KA/BD;AAgCH,C","file":"theme-bundle.chunk.4.js","sourcesContent":["import $ from 'jquery';\r\nimport _ from 'lodash';\r\nimport nod from './nod';\r\nimport forms from './models/forms';\r\n\r\nconst inputTagNames = [\r\n    'input',\r\n    'select',\r\n    'textarea',\r\n];\r\n\r\n/**\r\n * Apply class name to an input element on its type\r\n * @param {object} input\r\n * @param {string} formFieldClass\r\n * @return {object} Element itself\r\n */\r\nfunction classifyInput(input, formFieldClass) {\r\n    const $input = $(input);\r\n    const $formField = $input.parent(`.${formFieldClass}`);\r\n    const tagName = $input.prop('tagName').toLowerCase();\r\n\r\n    let className = `${formFieldClass}--${tagName}`;\r\n    let specificClassName;\r\n\r\n    // Input can be text/checkbox/radio etc...\r\n    if (tagName === 'input') {\r\n        const inputType = $input.prop('type');\r\n\r\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\r\n            // ie: .form-field--checkbox, .form-field--radio\r\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\r\n        } else {\r\n            // ie: .form-field--input .form-field--inputText\r\n            specificClassName = `${className}${_.capitalize(inputType)}`;\r\n        }\r\n    }\r\n\r\n    // Apply class modifier\r\n    return $formField\r\n        .addClass(className)\r\n        .addClass(specificClassName);\r\n}\r\n\r\n/**\r\n * Apply class name to each input element in a form based on its type\r\n * @example\r\n * // Before\r\n * <form id=\"form\">\r\n *     <div class=\"form-field\">\r\n *         <input type=\"text\">\r\n *     </div>\r\n *     <div class=\"form-field\">\r\n *         <select>...</select>\r\n *     </div>\r\n * </form>\r\n *\r\n * classifyForm('#form', { formFieldClass: 'form-field' });\r\n *\r\n * // After\r\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\r\n * <div class=\"form-field form-field--select\">...</div>\r\n *\r\n * @param {string|object} formSelector - selector or element\r\n * @param {object} options\r\n * @return {jQuery} Element itself\r\n */\r\nexport function classifyForm(formSelector, options = {}) {\r\n    const $form = $(formSelector);\r\n    const $inputs = $form.find(inputTagNames.join(', '));\r\n\r\n    // Obtain options\r\n    const { formFieldClass = 'form-field' } = options;\r\n\r\n    // Classify each input in a form\r\n    $inputs.each((__, input) => {\r\n        classifyInput(input, formFieldClass);\r\n    });\r\n\r\n    return $form;\r\n}\r\n\r\n/**\r\n * Get id from given field\r\n * @param {object} $field JQuery field object\r\n * @return {string}\r\n */\r\nfunction getFieldId($field) {\r\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\r\n\r\n    if (fieldId && fieldId.length !== 0) {\r\n        return fieldId[0];\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Insert hidden field after State/Province field\r\n * @param {object} $stateField JQuery field object\r\n */\r\nfunction insertStateHiddenField($stateField) {\r\n    const fieldId = getFieldId($stateField);\r\n    const stateFieldAttrs = {\r\n        type: 'hidden',\r\n        name: `FormFieldIsText${fieldId}`,\r\n        value: '1',\r\n    };\r\n\r\n    $stateField.after($('<input />', stateFieldAttrs));\r\n}\r\n\r\nconst Validators = {\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     */\r\n    setEmailValidation: (validator, field) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const result = forms.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a valid email.',\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param validator\r\n     * @param passwordSelector\r\n     * @param password2Selector\r\n     * @param requirements\r\n     * @param isOptional\r\n     */\r\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\r\n        const $password = $(passwordSelector);\r\n        const passwordValidations = [\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a password.',\r\n            },\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.match(new RegExp(requirements.alpha))\r\n                        && val.match(new RegExp(requirements.numeric))\r\n                        && val.length >= requirements.minlength;\r\n\r\n                    // If optional and nothing entered, it is valid\r\n                    if (isOptional && val.length === 0) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: requirements.error,\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a password.',\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val === $password.val();\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'Your passwords do not match.',\r\n            },\r\n        ];\r\n\r\n        validator.add(passwordValidations);\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param {Nod} validator\r\n     * @param {Object} selectors\r\n     * @param {string} selectors.errorSelector\r\n     * @param {string} selectors.fieldsetSelector\r\n     * @param {string} selectors.formSelector\r\n     * @param {string} selectors.maxPriceSelector\r\n     * @param {string} selectors.minPriceSelector\r\n     */\r\n    setMinMaxPriceValidation: (validator, selectors) => {\r\n        const {\r\n            errorSelector,\r\n            fieldsetSelector,\r\n            formSelector,\r\n            maxPriceSelector,\r\n            minPriceSelector,\r\n        } = selectors;\r\n\r\n        validator.configure({\r\n            form: formSelector,\r\n            preventSubmit: true,\r\n            successClass: '_', // KLUDGE: Don't apply success class\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min price must be less than max. price.',\r\n            selector: minPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min price must be less than max. price.',\r\n            selector: maxPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Max. price is required.',\r\n            selector: maxPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min. price is required.',\r\n            selector: minPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Input must be greater than 0.',\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            validate: 'min-number:0',\r\n        });\r\n\r\n        validator.setMessageOptions({\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            parent: fieldsetSelector,\r\n            errorSpan: errorSelector,\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     */\r\n    setStateCountryValidation: (validator, field) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: 'presence',\r\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes classes from dirty form if previously checked\r\n     * @param field\r\n     */\r\n    cleanUpStateValidation: (field) => {\r\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\r\n\r\n        Object.keys(nod.classes).forEach((value) => {\r\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\r\n                $fieldClassElement.removeClass(nod.classes[value]);\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nexport { Validators, insertStateHiddenField };\r\n","const forms = {\r\n    email(value) {\r\n        const re = /^.+@.+\\..+/;\r\n        return re.test(value);\r\n    },\r\n\r\n    /**\r\n     * Validates a password field\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    password(value) {\r\n        return this.notEmpty(value);\r\n    },\r\n\r\n    /**\r\n     * validates if a field is empty\r\n     * @param value\r\n     * @returns {boolean}\r\n     *\r\n     */\r\n    notEmpty(value) {\r\n        return value.length > 0;\r\n    },\r\n};\r\n\r\nexport default forms;\r\n","import $ from 'jquery';\r\nimport utils from '@bigcommerce/stencil-utils';\r\nimport _ from 'lodash';\r\nimport { insertStateHiddenField } from './form-utils';\r\nimport swal from 'sweetalert2';\r\n\r\n/**\r\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\r\n * @returns {jQuery|HTMLElement}\r\n */\r\nfunction makeStateRequired(stateElement, context) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-select',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\r\n\r\n    if ($hiddenInput.length !== 0) {\r\n        $hiddenInput.remove();\r\n    }\r\n\r\n    if ($newElement.prev().find('small').length === 0) {\r\n        // String is injected from localizer\r\n        $newElement.prev().append(`<small>${context.required}</small>`);\r\n    } else {\r\n        $newElement.prev().find('small').show();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * If a country with states is the default, a select will be sent,\r\n * In this case we need to be able to switch to an input field and hide the required field\r\n */\r\nfunction makeStateOptional(stateElement) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        type: 'text',\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-input',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<input />', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n\r\n    if ($newElement.length !== 0) {\r\n        insertStateHiddenField($newElement);\r\n        $newElement.prev().find('small').hide();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * Adds the array of options from the remote request to the newly created select box.\r\n * @param {Object} statesArray\r\n * @param {jQuery} $selectElement\r\n * @param {Object} options\r\n */\r\nfunction addOptions(statesArray, $selectElement, options) {\r\n    const container = [];\r\n\r\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\r\n\r\n    if (!_.isEmpty($selectElement)) {\r\n        _.each(statesArray.states, (stateObj) => {\r\n            if (options.useIdForStates) {\r\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\r\n            } else {\r\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\r\n            }\r\n        });\r\n\r\n        $selectElement.html(container.join(' '));\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {jQuery} stateElement\r\n * @param {Object} context\r\n * @param {Object} options\r\n * @param {Function} callback\r\n */\r\nexport default function (stateElement, context = {}, options, callback) {\r\n    /**\r\n     * Backwards compatible for three parameters instead of four\r\n     *\r\n     * Available options:\r\n     *\r\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\r\n     */\r\n    if (typeof options === 'function') {\r\n        /* eslint-disable no-param-reassign */\r\n        callback = options;\r\n        options = {};\r\n        /* eslint-enable no-param-reassign */\r\n    }\r\n\r\n    $('select[data-field-type=\"Country\"]').on('change', event => {\r\n        const countryName = $(event.currentTarget).val();\r\n\r\n        if (countryName === '') {\r\n            return;\r\n        }\r\n\r\n        utils.api.country.getByName(countryName, (err, response) => {\r\n            if (err) {\r\n                swal({\r\n                    text: context.state_error,\r\n                    type: 'error',\r\n                });\r\n\r\n                return callback(err);\r\n            }\r\n\r\n            const $currentInput = $('[data-field-type=\"State\"]');\r\n\r\n            if (!_.isEmpty(response.data.states)) {\r\n                // The element may have been replaced with a select, reselect it\r\n                const $selectElement = makeStateRequired($currentInput, context);\r\n\r\n                addOptions(response.data, $selectElement, options);\r\n                callback(null, $selectElement);\r\n            } else {\r\n                const newElement = makeStateOptional($currentInput, context);\r\n\r\n                callback(null, newElement);\r\n            }\r\n        });\r\n    });\r\n}\r\n"],"sourceRoot":""}